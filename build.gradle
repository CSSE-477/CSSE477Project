plugins {
	id 'org.hidetake.ssh' version '2.7.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'maven-publish'

mainClassName = "app.SimpleWebServer"

repositories {
    maven {
        url "https://maven.csse.rose-hulman.edu/artifactory/libs-release"
    }
}

dependencies {
	compile 'org.apache.logging.log4j:log4j-api:2.+'
	compile 'org.apache.logging.log4j:log4j-core:2.+'

	compile 'com.google.http-client:google-http-client:1.+'
	compile 'com.google.http-client:google-http-client-jackson:1.+'

    compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'

    compile group: 'commons-io', name: 'commons-io', version: '2.0.1'

    testCompile 'junit:junit:4.+'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


group = "edu.rosehulman.csse477.YoloSwagProject"

if (System.getenv("CI_BUILD_TAG") != null) {
    version = "${System.getenv("CI_BUILD_TAG")}"
} else {
    version = '1.0.1-SNAPSHOT'
}


jar {
    manifest {
        attributes "Implementation-Title": "YoloSwagSWS",
                "Implementation-Version": "${version}",
                "Main-Class": "app.SimpleWebServer"
    }
    baseName = 'YoloSwagSws'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "file://${buildDir}/repo")
		}
	}
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
			artifact packageSources
        }
    }
}

publishing {
    repositories {
        maven {
            credentials {
                username System.getenv('MAVEN_USER')
                password System.getenv('MAVEN_PASSWORD')
            }
            url "https://maven.csse.rose-hulman.edu/artifactory/student-release-local"
        }
    }
}


// Code coverage analyzer
jacoco {
	toolVersion = "0.7.+"
}

jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
	}
}

test {
	filter {
		includeTestsMatching "*MasterSuite"
	}
	jacoco {
		append = false
	}
    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
	ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
	doLast {
		println "Transforming source file."
		
		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		parser.setFeature("http://xml.org/sax/features/namespaces", false)
				  
		def reportNode = parser.parse(srcFile)
		reportNode.children().each {
			if(it.name() == 'counter') {
				String type = it.@type
				float missed = it.@missed as float
				float covered = it.@covered as float
				float percentage = covered / (missed + covered) * 100
				println "Code Coverage[$type]: $percentage%"
			}
		}
	}
}

jacocoTestReport.finalizedBy(codeCoverageInfo)

// SSH Publishing

ssh.settings { knownHosts = allowAnyHosts }

remotes {
	deployment {
		host = System.getenv('SSH_HOST')
		user = System.getenv('SSH_USER')
		password = System.getenv('SSH_PASSWORD')
	}
}

task publishToWebServer(dependsOn: distZip) << {
	ssh.run {
		session(remotes.deployment) {
			println "Checking if remote /tmp/YoloSwagSWS exists ..."
			def result = execute('if test -d /tmp/YoloSwagSWS; then echo "exists"; fi')						
			if(result == "exists") {
				println("Removing /tmp/YoloSwagSWS")
				execute('rm -rf /tmp/YoloSwagSWS')
				println("Remote /tmp/YoloSwagSWS removed!")
			}

			println("Creating /tmp/YoloSwagSWS")
			execute('mkdir -p /tmp/YoloSwagSWS')
			println("Remote /tmp/YoloSwagSWS created!")

			println "Transfering file from local ${buildDir}/distributions to remote /tmp/YoloSwagSWS ..."
			put from: "${buildDir}/distributions/*.zip", into: '/tmp/YoloSwagSWS'
			println "Files transfer complete now setting up the web server ..."

			println "Checking if remote /home/csse/YoloSwagSWS exists ..."
			result = execute('if test -d /home/csse/YoloSwagSWS; then echo "exists"; fi')
			if(result == "exists") {
				println("Remote /home/csse/YoloSwagSWS is being moved to /home/csse/tmp/YoloSwagSWS for rollback...")
				executeSudo('rm -rf /home/csse/tmp/YoloSwagSWS', pty: true)
				executeSudo('mkdir -p /home/csse/tmp/YoloSwagSWS', pty: true)
				executeSudo('mv /home/csse/YoloSwagSWS/* /home/csse/tmp/YoloSwagSWS', pty: true)
				println("Remote /home/csse/YoloSwagSWS moved!")

				println("Remote /home/csse/YoloSwagSWS is being removed...")
				executeSudo('rm -rf /home/csse/YoloSwagSWS', pty: true)
				println("Remote /home/csse/YoloSwagSWS removed!")
			}

			println("Remote /home/csse/YoloSwagSWS is being created...")
			executeSudo('mkdir -p /home/csse/YoloSwagSWS', pty: true)
			println("Remote /home/csse/YoloSwagSWS created!")

			println("Extracting new zip into /home/csse/YoloSwagSWS")
			executeSudo('unzip /tmp/YoloSwagSWS/C*.zip -d /home/csse', pty: true)
			executeSudo('mv /home/csse/CSSE477Project*/* /home/csse/YoloSwagSWS', pty: true)
			executeSudo('rm -rf /home/csse/CSSE477Project*/', pty: true)

			println("Creating plugin directory /home/csse/YoloSwagSWS/bin/plugin")
			executeSudo('mkdir /home/csse/YoloSwagSWS/bin/plugin', pty: true)
			println("Moving static web directory to /home/csse/YoloSwagSWS/bin/plugin/web")
			execute('rm -rf /tmp/web', pty: true)
			put from: "${projectDir}/web", into: '/tmp'
			executeSudo('mv /tmp/web /home/csse/YoloSwagSWS/bin/plugin', pty: true)

			println "Stopping YoloSwagWebServer service"
			executeSudo('service webserver stop', pty: true)

			sleep(3 * 1000)
			println "Starting YoloSwagWebServer service"
			executeSudo('service webserver start', pty: true)

			sleep(3 * 1000)
			println "Running curl command to see if server is started"
			executeSudo('/bin/bash /home/csse/serverE2E.sh', pty: true)
			println("YoloSwagSWS has been deployed to " + System.getenv('SSH_HOST'))
		}
	}
}
